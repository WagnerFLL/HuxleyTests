import Level_Advanced_4.Problem962;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class Test962 {

    @Test
    void runTest() {

        String r1 = "1 1 1 1 1\n1 2 2 2 2\n1 2 3 3 3\n1 2 3 4 4\n1 2 3 4 5\n";
        String r2 = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" +
                " 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 " +
                "2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2 3 3 3 3 3" +
                " 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 " +
                "3 3\n1 2 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 " +
                "4 4 4 4 4 4 4 4 4 4 4\n1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 " +
                "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n1 2 3 4 5 6 6 6 6 6 6 6 6 6" +
                " 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n1 2 3 4 5" +
                " 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7" +
                " 7 7 7 7\n1 2 3 4 5 6 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 " +
                "8 8 8 8 8 8 8 8 8 8 8 8 8 8\n1 2 3 4 5 6 7 8 9 9 9 9 9 9 9 9 9 9 9 9" +
                " 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\n1 2 3 4 5 6 7 8 9 1" +
                "0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10" +
                " 10 10 10 10 10 10 10 10 10 10 10\n1 2 3 4 5 6 7 8 9 10 11 11 11 11" +
                " 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 " +
                "11 11 11 11 11 11 11\n1 2 3 4 5 6 7 8 9 10 11 12 12 12 12 12 12 12 " +
                "12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 1" +
                "2 12 12\n1 2 3 4 5 6 7 8 9 10 11 12 13 13 13 13 13 13 13 13 13 13 1" +
                "3 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13\n1 2 " +
                "3 4 5 6 7 8 9 10 11 12 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14" +
                " 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\n1 2 3 4 5 6 7 8 9 10 1" +
                "1 12 13 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 1" +
                "5 15 15 15 15 15 15 15 15 15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 " +
                "16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 " +
                "16 16 16 16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 17 17 17 17 17" +
                " 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17\n1 2 " +
                "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 18 18 18 18 18 18 18 18 18 1" +
                "8 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18\n1 2 3 4 5 6 7 8 9 10 " +
                "11 12 13 14 15 16 17 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 " +
                "19 19 19 19 19 19 19 19 19 19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16" +
                " 17 18 19 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20" +
                " 20 20 20 20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 2" +
                "1 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21\n1 2" +
                " 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 22 22 22 22 22 " +
                "22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\n1 2 3 4 5 6 7 8 9 10" +
                " 11 12 13 14 15 16 17 18 19 20 21 22 23 23 23 23 23 23 23 23 23 23 23" +
                " 23 23 23 23 23 23 23 23 23 23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1" +
                "6 17 18 19 20 21 22 23 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 2" +
                "4 24 24 24 24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 " +
                "22 23 24 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n1 " +
                "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 26" +
                " 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26\n1 2 3 4 5 6 7 8 9 1" +
                "0 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 27 27 27 27 27 27 " +
                "27 27 27 27 27 27 27 27 27 27\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1" +
                "7 18 19 20 21 22 23 24 25 26 27 28 28 28 28 28 28 28 28 28 28 28 28 28 " +
                "28 28 28\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 2" +
                "4 25 26 27 28 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29\n1 2 3 4 5 6" +
                " 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 3" +
                "0 30 30 30 30 30 30 30 30 30 30 30 30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14" +
                " 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 31 31 31 31 31 31 3" +
                "1 31 31 31 31 31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21" +
                " 22 23 24 25 26 27 28 29 30 31 32 32 32 32 32 32 32 32 32 32 32 32\n1 2" +
                " 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28" +
                " 29 30 31 32 33 33 33 33 33 33 33 33 33 33 33\n1 2 3 4 5 6 7 8 9 10 11 " +
                "12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 34" +
                " 34 34 34 34 34 34 34 34\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 " +
                "19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 35 35 35 35 35 35 35" +
                " 35\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 " +
                "26 27 28 29 30 31 32 33 34 35 36 36 36 36 36 36 36 36\n1 2 3 4 5 6 7 8 " +
                "9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 " +
                "33 34 35 36 37 37 37 37 37 37 37\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1" +
                "6 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 38 38 " +
                "38 38 38\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 " +
                "25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 39 39 39 39\n1 2 3 4 5 6 7 8" +
                " 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 3" +
                "3 34 35 36 37 38 39 40 40 40 40\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 " +
                "18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 " +
                "41\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27" +
                " 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 42\n1 2 3 4 5 6 7 8 9 10 11 12" +
                " 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 " +
                "38 39 40 41 42 43\n";
        String r3 = "1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 2\n1 2 3 3 3 3 3 3\n1 2 3 4 4 4 4 4\n1 2 3 4 5 5 5 5\n1 2 3 4 5 6 6 6\n1 2 3 4 5 6 7 7\n1 2 3 4 5 6 7 8\n";
        assertAll(
                () -> assertEquals(r1, Problem962.run(5)),
                () -> assertEquals(r2, Problem962.run(43)),
                () -> assertEquals(r3, Problem962.run(8)),
                () -> assertEquals("1\n", Problem962.run(1))
        );

    }

    @Test
    void errorTest() {

        assertAll(
                () -> assertThrows(java.lang.AssertionError.class, () -> Problem962.run(-1),
                        "Valor negativo inesperado!"),
                () -> assertThrows(java.lang.AssertionError.class, () -> Problem962.run(131),
                        "Valor inesperado!"),
                () -> assertThrows(java.lang.NumberFormatException.class, () -> Problem962.run(Integer.parseInt(null)),
                        "Inteiro inesperado!")
        );

    }

}
